from typing import List, Optional

from funcionalidades.faq.domain.entities.faq_entity import FAQ
from funcionalidades.faq.domain.repositories.faq_repository import FAQRepository
from funcionalidades.faq.application.use_cases.generar_faq_dinamicas_use_case import GenerarFAQDinamicasUseCase


# Datos est√°ticos de FAQ
FAQ_DATA = [
    FAQ(
        id=1,
        pregunta="¬øCu√°les son los m√©todos de env√≠o disponibles?",
        respuesta="Ofrecemos env√≠o est√°ndar (3-5 d√≠as h√°biles) y env√≠o express (1-2 d√≠as h√°biles). Los costos var√≠an seg√∫n el destino y peso del paquete."
    ),
    FAQ(
        id=2,
        pregunta="¬øCu√°nto tiempo tengo para devolver un producto?",
        respuesta="Tienes 30 d√≠as calendario desde la fecha de entrega para devolver cualquier producto en perfecto estado. El producto debe estar en su empaque original."
    ),
    FAQ(
        id=3,
        pregunta="¬øC√≥mo puedo rastrear mi pedido?",
        respuesta="Una vez que tu pedido sea enviado, recibir√°s un email con el n√∫mero de seguimiento. Tambi√©n puedes consultar el estado en tu cuenta."
    ),
    FAQ(
        id=4,
        pregunta="¬øQu√© m√©todos de pago aceptan?",
        respuesta="Aceptamos tarjetas de cr√©dito/d√©bito (Visa, Mastercard, American Express), PayPal y transferencias bancarias."
    ),
    FAQ(
        id=5,
        pregunta="¬øHacen env√≠os a todo el pa√≠s?",
        respuesta="S√≠, realizamos env√≠os a todas las ciudades principales del pa√≠s. Para ubicaciones remotas, el tiempo de entrega puede ser mayor."
    ),
    FAQ(
        id=6,
        pregunta="¬øPuedo modificar o cancelar mi pedido?",
        respuesta="Puedes modificar o cancelar tu pedido hasta 2 horas despu√©s de realizarlo, siempre que no haya sido procesado para env√≠o."
    )
]


class FAQRepositoryImpl(FAQRepository):
    def __init__(self):
        self._dynamic_faq_generator = GenerarFAQDinamicasUseCase(self)

    def listar(self) -> List[FAQ]:
        """Listar FAQ est√°ticas + din√°micas basadas en conversaciones reales"""
        # Obtener FAQ est√°ticas
        static_faqs = FAQ_DATA.copy()
        
        # Generar FAQ din√°micas basadas en conversaciones reales
        try:
            dynamic_faqs = self._dynamic_faq_generator.ejecutar(dias_atras=30)
            print(f"üìä FAQ REPO: Combinando {len(static_faqs)} FAQ est√°ticas con {len(dynamic_faqs)} FAQ din√°micas")
            
            # Combinar FAQ est√°ticas y din√°micas
            all_faqs = static_faqs + dynamic_faqs
            
            # Ordenar por ID (est√°ticas primero, luego din√°micas)
            all_faqs.sort(key=lambda x: x.id)
            
            return all_faqs
            
        except Exception as e:
            print(f"‚ö†Ô∏è FAQ REPO: Error generando FAQ din√°micas: {e}")
            # En caso de error, devolver solo FAQ est√°ticas
            return static_faqs

    def get_by_id(self, faq_id: int) -> Optional[FAQ]:
        # Buscar en FAQ est√°ticas primero
        for faq in FAQ_DATA:
            if faq.id == faq_id:
                return faq
        
        # Si no se encuentra, buscar en FAQ din√°micas
        try:
            dynamic_faqs = self._dynamic_faq_generator.ejecutar(dias_atras=30)
            for faq in dynamic_faqs:
                if faq.id == faq_id:
                    return faq
        except Exception as e:
            print(f"‚ö†Ô∏è FAQ REPO: Error buscando FAQ din√°mica {faq_id}: {e}")
        
        return None

    def buscar_por_palabra_clave(self, palabra_clave: str) -> List[FAQ]:
        palabra_clave_lower = palabra_clave.lower()
        resultados = []
        
        # Buscar en FAQ est√°ticas
        for faq in FAQ_DATA:
            if (palabra_clave_lower in faq.pregunta.lower() or 
                palabra_clave_lower in faq.respuesta.lower()):
                resultados.append(faq)
        
        # Buscar en FAQ din√°micas
        try:
            dynamic_faqs = self._dynamic_faq_generator.ejecutar(dias_atras=30)
            for faq in dynamic_faqs:
                if (palabra_clave_lower in faq.pregunta.lower() or 
                    palabra_clave_lower in faq.respuesta.lower()):
                    resultados.append(faq)
        except Exception as e:
            print(f"‚ö†Ô∏è FAQ REPO: Error buscando en FAQ din√°micas: {e}")
        
        return resultados
